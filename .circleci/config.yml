# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@2.0
    node: circleci/node@5

anchors:
  node-executor: &node-executor
    name: node/default
    tag: '16.14'
  docker-executor: &docker-executor
    name: docker/machine
    dlc: false

jobs:
  build:
    executor: *docker-executor
    steps:
      - checkout
      - run:
          name: Custom enviroment variables
          command: |
            export CACHE_FROM_IMAGES=$(grep "^FROM " src/Dockerfile | sed 's/FROM //g')
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${CIRCLE_PROJECT_REPONAME}:latest"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/build:
          docker-context: src/
          path: src/
          image: ${CIRCLE_PROJECT_REPONAME}
          tag: build
          cache_from: ${CACHE_FROM_IMAGES}
          step-name: Build docker image
      - run:
          name: Save docker image
          command: docker save -o images.tar ${CIRCLE_PROJECT_REPONAME}:build
      - persist_to_workspace:
          root: ./
          paths:
            - images.tar*

  test:
    environment:
      THIS_DOCKER_IMAGE: httpd-cron
    executor: *docker-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i /tmp/workspace/images.tar
      - checkout
      - run:
          name: Run tests
          command: |
            cd tests/
            sudo chown root:root crontab
            TEST_IMAGE=${CIRCLE_PROJECT_REPONAME}:build ./runTests.sh

  publish-docker:
    executor: *docker-executor
    resource_class: medium
    parameters:
      registry-env:
        description: The registry envirnment variable to use to publish docker images.
        type: string
        default: docker.io
      docker-username-env:
        description: The docker registry username env variable to use.
        type: string
        default: DOCKER_LOGIN
      docker-password-env:
        description: The docker registery password env variable to use.
        type: string
        default: DOCKER_PASSWORD
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Custom enviroment variables
          command: |
            export PRIMARY_DOCKER_TAG=$(cat /tmp/workspace/version.txt)
            export DOCKER_TAGS=${PRIMARY_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${PRIMARY_DOCKER_TAG}" ]]; then
              for A in $(echo ${PRIMARY_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},main,latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            echo "export FINAL_IMAGE_NAME=${<< parameters.docker-username-env >>}/${CIRCLE_PROJECT_REPONAME}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: ${<< parameters.registry-env >>}
          docker-password: << parameters.docker-password-env >>
          docker-username: << parameters.docker-username-env >>
      - run:
          name: Load docker images
          command: |
            docker load -i /tmp/workspace/images.tar
      - run:
          name: Tag docker images for repos
          command: |
            IFS="," read -ra LOOP_TAGS \<<< "${DOCKER_TAGS}"
            set -x
            for TAG in "${LOOP_TAGS[@]}"; do
              docker tag ${CIRCLE_PROJECT_REPONAME}:build ${<< parameters.registry-env >>}/${FINAL_IMAGE_NAME}:${TAG}
            done
            set +x
      - docker/push:
          step-name: Pushing image to desired repo
          registry: ${<< parameters.registry-env >>}
          image: ${FINAL_IMAGE_NAME}
          tag: ${DOCKER_TAGS}

  build-test-push:
    environment:
      THIS_DOCKER_IMAGE: httpd-cron
    executor: *docker-executor
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Custom enviroment variables
          command: |
            export THIS_DOCKER_TAG=$(cat /tmp/workspace/version.txt)
            echo "export THIS_DOCKER_TAG=${THIS_DOCKER_TAG}" >> ${BASH_ENV}
            export CACHE_FROM_IMAGES=$(grep "^FROM " src/Dockerfile | sed 's/FROM //g')
            if [[ "<< pipeline.git.branch >>" != "main" ]]; then
              export CACHE_FROM_IMAGES="${CACHE_FROM_IMAGES},${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:latest"
            fi
            echo "export CACHE_FROM_IMAGES=${CACHE_FROM_IMAGES}" >> ${BASH_ENV}
            export DOCKER_TAGS=${THIS_DOCKER_TAG}
            if [[ "main" == "<< pipeline.git.branch >>" ]] && [[ "main" != "${THIS_DOCKER_TAG}" ]]; then
              for A in $(echo ${THIS_DOCKER_TAG} | tr "." "\n"); do 
                NOW="$PREV.$A"
                export DOCKER_TAGS="${DOCKER_TAGS},${NOW:1}"
                PREV=$NOW
              done
              export DOCKER_TAGS="${DOCKER_TAGS},latest"
            fi
            echo "export DOCKER_TAGS=${DOCKER_TAGS}" >> ${BASH_ENV}
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/build:
          docker-context: src/
          path: src/
          image: ${THIS_DOCKER_IMAGE}
          tag: ${DOCKER_TAGS}
          registry: ${DOCKER_REGISTRY}
          cache_from: ${CACHE_FROM_IMAGES}
          step-name: Build docker image
      - run:
          name: Run tests
          command: |
            cd tests/
            sudo chown root:root crontab
            TEST_IMAGE=${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:${THIS_DOCKER_TAG} ./runTests.sh
      - run:
          name: Save docker image
          command: docker save -o images.tar ${CIRCLE_PROJECT_REPONAME}:build
      - persist_to_workspace:
          root: ./
          paths:
            - images.tar*
      - docker/push:
          step-name: Pushing images to private registry
          registry: $DOCKER_REGISTRY
          image: ${THIS_DOCKER_IMAGE}
          tag: ${DOCKER_TAGS}

  release:
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    executor: *node-executor
    steps:
      - checkout
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Run semantic-release
          command: |
            npx -p semantic-release -p semantic-release/exec semantic-release ${ADDITIONAL_ARGS}
            if [[ -f version.txt ]]; then 
              cp -v version.txt /tmp/workspace
            else 
              echo "${CIRCLE_BRANCH}" | sed 's#/#-#g' > /tmp/workspace/version.txt
            fi
            echo "Version: $(cat /tmp/workspace/version.txt)"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - version.txt

workflows:
  default:
    jobs:
      - docker/hadolint:
          name: validate-dockerfile
          context: default
          dockerfiles: src/Dockerfile
      - build:
          context: default
          requires:
            - validate-dockerfile
      - test:
          context: default
          requires:
            - build
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - test
      - publish-docker:
          name: publish-docker-private
          context: default
          registry-env: PRIVATE_DOCKER_REGISTRY
          docker-username-env: PRIVATE_DOCKER_USERNAME
          docker-password-env: PRIVATE_DOCKER_PASSWORD
          requires:
            - test
            - release
      - publish-docker:
          name: publish-docker-ghcr
          context: default
          registry-env: GHCR_REGISTRY
          docker-username-env: GHCR_USERNAME
          docker-password-env: GHCR_TOKEN
          requires:
            - test
            - release
          filters:
            branches:
              only:
                - main
                - dev
      - publish-docker:
          name: publish-docker-dockerio
          context: default
          registry-env: DOCKER_IO_REGISTRY
          docker-username-env: DOCKER_IO_USERNAME
          docker-password-env: DOCKER_IO_PASSWORD
          requires:
            - test
            - release
          filters:
            branches:
              only:
                - main
