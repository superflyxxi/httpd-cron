# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
    docker: circleci/docker@1
    node: circleci/node@4

# Orchestrate or schedule a set of jobs
jobs:
  build-test-push:
    environment:
      THIS_DOCKER_IMAGE: httpd-cron
    machine: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Custom enviroment variables
          command: |
            echo 'export THIS_DOCKER_LABEL=$(cat /tmp/workspace/version.txt)' >> ${BASH_ENV}
            if [[ ! "${CIRCLE_BRANCH}" == "main" ]] && [[ ! ${CIRCLE_BRANCH} == v* ]]; then
              echo 'export CACHE_FROM_IMAGE=${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:latest' >> ${BASH_ENV}
            else
              echo 'export CACHE_FROM_IMAGE=httpd:alpine' >> ${BASH_ENV}
            fi
            cat ${BASH_ENV}
      - docker/check:
          registry: $DOCKER_REGISTRY
      - docker/pull:
          images: httpd:alpine,${CACHE_FROM_IMAGE}
          ignore-docker-pull-error: true
      - checkout
      - docker/build:
          docker-context: src/
          path: src/
          image: ${THIS_DOCKER_IMAGE}
          tag: ${THIS_DOCKER_LABEL}
          registry: ${DOCKER_REGISTRY}
          extra_build_args: --build-arg BUILD_IMAGE=${THIS_REGISTRY}/${THIS_IMAGE}:${THIS_DOCKER_LABEL}
          cache_from: ${CACHE_FROM_IMAGE}
          step-name: Build docker image
      - run:
          name: Run tests
          command: |
            cd tests/
            sudo chown root:root crontab
            TEST_IMAGE=${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:${THIS_DOCKER_LABEL} ./runTests.sh
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Tag image as latest
                command: docker tag ${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:${THIS_DOCKER_LABEL} ${DOCKER_REGISTRY}/${THIS_DOCKER_IMAGE}:latest
            - docker/push:
                step-name: Pushing latest image
                registry: $DOCKER_REGISTRY
                image: ${THIS_DOCKER_IMAGE}
                tag: latest
      - docker/push:
          step-name: Pushing actual image
          registry: $DOCKER_REGISTRY
          image: ${THIS_DOCKER_IMAGE}
          tag: ${THIS_DOCKER_LABEL}
  release:
    parameters:
      prerelease:
        description: Whether it's a pre-release and not actually release.
        type: boolean
        default: false
    executor: node/default
    steps:
      - checkout
#      - node/install-packages
      - node/install-packages:
        override-ci-command: npm install -D @semantic-release/exec
      - attach_workspace:
          at: /tmp/workspace
      - when:
          condition: << parameters.prerelease >>
          steps:
            run:
              name: Define additional args
              command: |
                echo "ADDITIONAL_ARGS=--dry-run" >> ${BASH_ENV}
      - run:
          name: Run semantic-release
          command: |
            npx semantic-release ${ADDITIONAL_ARGS}
            if [[ -f version.txt ]]; then 
              cp -v version.txt /tmp/workspace
            else
              echo "${CIRCLE_BRANCH}" > /tmp/workspace/version.txt
            fi
            echo "Version: $(cat /tmp/workspace/version.txt)"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - version.txt

workflows:
  default:
    jobs:
      - release:
          name: pre-release
          context: default
          prerelease: true
      - build-test-push:
          context: default
          requires:
            - pre-release
      - release:
          name: release
          context: default
          prerelease: false
          requires:
            - build-test-push
